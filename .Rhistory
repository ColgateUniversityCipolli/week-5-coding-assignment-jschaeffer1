df.index = 1 #Initializing where to input in dataframe
for (i in track.indices) {
#Running for loop over every track
##########################################################
###                      Step 1                       ####
# Pulling file and extracting necessary info from JSON
##########################################################
current.filename = all.tracks[i]
#current.filename = "The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json"
current.songname = str_sub(current.filename, end = -6)
#Making a vector containing artist, album, and song
song.vector = str_split_1(current.songname, "-")
###Pulling track, album, and artist
current.track = song.vector[3]
current.album = song.vector[2]
current.artist = song.vector[1]
###Pulling data from JSON file
json.pathname = paste(folder.name, current.filename, sep = '/')
json.track = fromJSON(json.pathname)
###Extracting specific information
dat.temp = data.frame(
overall_loudness = json.track$lowlevel$average_loudness,
spectral_energy = json.track$lowlevel$spectral_energy$mean,
dissonance = json.track$lowlevel$dissonance$mean,
pitch_salience = json.track$lowlevel$pitch_salience$mean,
bpm = json.track$rhythm$bpm,
beats_loudness = json.track$rhythm$beats_loudness$mean,
danceability = json.track$rhythm$danceability,
tuning_frequency = json.track$tonal$tuning_frequency,
)
###Putting information into dataframe
song.dataframe[c(df.index), ] =
c(
current.artist,
current.album,
current.track,
overall_loudness,
spectral_energy,
dissonance,
pitch_salience,
bpm,
beats_loudness,
danceability,
tuning_frequency
)
df.index=df.index+1 #Moving to next dataframe index
}
json.track$lowlevel$average_loudness
dat.temp = data.frame() |>
mutate(overall_loudness = json.track$lowlevel$average_loudness)
view(dat.temp)
dat.temp = data.frame() |>
mutate(overall_loudness = json.track$lowlevel$average_loudness) |>
mutate(spectral_energy = json.track$lowlevel$spectral_energy$mean)
view(dat.temp)
dat.temp = empty.dataframe |>
mutate(overall_loudness = json.track$lowlevel$average_loudness) |>
mutate(spectral_energy = json.track$lowlevel$spectral_energy$mean)
view(dat.temp)
##########################################################
###                      Step 2                       ####
#Completing step 1 for every JSON File
##########################################################
library(stringr)
library(jsonlite)
library(tidyverse)
#Making our empty dataframe
empty.dataframe = data.frame(
artist = character(),
album = character(),
track = character(),
overall_loudness = numeric(),
spectral_energy = numeric(),
dissonance = numeric(),
pitch_salience = numeric(),
bpm = numeric(),
beats_loudness = numeric(),
danceability = numeric(),
tuning_frequency = numeric()
)
song.dataframe = empty.dataframe
#Pulling list of all tracks to be iterated
folder.name = 'EssentiaOutput'
all.tracks = list.files(folder.name)
#Making sure only valid json files are being used
json.count = str_count(all.tracks, ".json")
track.indices = which(json.count == 1)
df.index = 1 #Initializing where to input in dataframe
for (i in track.indices) {
#Running for loop over every track
##########################################################
###                      Step 1                       ####
# Pulling file and extracting necessary info from JSON
##########################################################
current.filename = all.tracks[i]
#current.filename = "The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json"
current.songname = str_sub(current.filename, end = -6)
#Making a vector containing artist, album, and song
song.vector = str_split_1(current.songname, "-")
###Pulling track, album, and artist
current.track = song.vector[3]
current.album = song.vector[2]
current.artist = song.vector[1]
###Pulling data from JSON file
json.pathname = paste(folder.name, current.filename, sep = '/')
json.track = fromJSON(json.pathname)
song.dataframe[df.index, ] <- tibble( #Adding the information directly through a tibble
artist = song.vector[1],
album = song.vector[2],
track = song.vector[3],
overall_loudness = json_data$lowlevel$average_loudness,
spectral_energy = json_data$lowlevel$spectral_energy$mean,
dissonance = json_data$lowlevel$dissonance$mean,
pitch_salience = json_data$lowlevel$pitch_salience$mean,
bpm = json_data$rhythm$bpm,
beats_loudness = json_data$rhythm$beats_loudness$mean,
danceability = json_data$rhythm$danceability,
tuning_frequency = json_data$tonal$tuning_frequency
)
df.index=df.index+1 #Moving to next dataframe index
}
##########################################################
###                      Step 2                       ####
#Completing step 1 for every JSON File
##########################################################
library(stringr)
library(jsonlite)
library(tidyverse)
#Making our empty dataframe
empty.dataframe = data.frame(
artist = character(),
album = character(),
track = character(),
overall_loudness = numeric(),
spectral_energy = numeric(),
dissonance = numeric(),
pitch_salience = numeric(),
bpm = numeric(),
beats_loudness = numeric(),
danceability = numeric(),
tuning_frequency = numeric()
)
song.dataframe = empty.dataframe
#Pulling list of all tracks to be iterated
folder.name = 'EssentiaOutput'
all.tracks = list.files(folder.name)
#Making sure only valid json files are being used
json.count = str_count(all.tracks, ".json")
track.indices = which(json.count == 1)
df.index = 1 #Initializing where to input in dataframe
for (i in track.indices) {
#Running for loop over every track
##########################################################
###                      Step 1                       ####
# Pulling file and extracting necessary info from JSON
##########################################################
current.filename = all.tracks[i]
#current.filename = "The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json"
current.songname = str_sub(current.filename, end = -6)
#Making a vector containing artist, album, and song
song.vector = str_split_1(current.songname, "-")
###Pulling track, album, and artist
current.track = song.vector[3]
current.album = song.vector[2]
current.artist = song.vector[1]
###Pulling data from JSON file
json.pathname = paste(folder.name, current.filename, sep = '/')
json.track = fromJSON(json.pathname)
song.dataframe[df.index, ] <- tibble( #Adding the information directly through a tibble
artist = song.vector[1],
album = song.vector[2],
track = song.vector[3],
overall_loudness = json.track$lowlevel$average_loudness,
spectral_energy = json.track$lowlevel$spectral_energy$mean,
dissonance = json.track$lowlevel$dissonance$mean,
pitch_salience = json.track$lowlevel$pitch_salience$mean,
bpm = json.track$rhythm$bpm,
beats_loudness = json.track$rhythm$beats_loudness$mean,
danceability = json.track$rhythm$danceability,
tuning_frequency = json.track$tonal$tuning_frequency
)
df.index=df.index+1 #Moving to next dataframe index
}
view(song.dataframe)
output.model = read.csv("EssentiaOutput/EssentiaModelOutput.csv")
output.model$emo_arousal
arousal.mean = rowMeans(arousal.mat)
arousal.emo = output.model$emo_arousal
arousal.deam = output.model$deam_arousal
arousal.muse = output.model$muse_arousal
#Turning vectors into matrix to calculate mean
arousal.mat = cbind(arousal.emo, arousal.deam, arousal.muse)
arousal.mean = rowMeans(arousal.mat)
arousal.mean
?rowwise
rame file
########################################
#Loading our dataframe file
output.model = read.csv("EssentiaOutput/EssentiaModelOutput.csv")
view(output.model)
#Loading our dataframe file
output.model = read.csv("EssentiaOutput/EssentiaModelOutput.csv")
###Writing the matrix utilizing tinyverse
###First focusing on transitioning to using means, then will select only desired columns
output.model = output.model %>%
rowwise() %>%
mutate(
arousal = mean(c(emo_arousal, deam_arousal, muse_arousal)),
valence = mean(c(emo_valence, deam_valence, muse_valence)),
aggressive = mean(c(eff_aggressive, nn_aggressive)),
happy = mean(c(eff_happy, nn_happy)),
party = mean(c(eff_party, nn_party)),
relaxed = mean(c(eff_relax, nn_relax)),
sad = mean(c(eff_sad, nn_sad)),
acoustic = mean(c(eff_acoustic, nn_acoustic)),
electric = mean(c(eff_electronic, nn_electronic)),
instrumental = mean(c(eff_instrumental, nn_instrumental)),
timbreBright = eff_timbre_bright
)
###Now that all desired columns are made, we retain only desired
output.model = output.model %>%
select(artist, album, track, arousal, valence, aggressive, happy,
party, relaxed, sad, acoustic, electric, instrumental, timbreBright)
view(output.model)
##########################################################
###                      Step 3                       ####
# Making new dataframe using essentia models
##########################################################
#Loading our dataframe file
output.model = read.csv("EssentiaOutput/EssentiaModelOutput.csv")
###Writing the matrix utilizing tinyverse
###First focusing on transitioning to using means, then will select only desired columns
output.model = output.model %>%
rowwise() %>%
mutate(
arousal = mean(c(emo_arousal, deam_arousal, muse_arousal)),
valence = mean(c(emo_valence, deam_valence, muse_valence)),
aggressive = mean(c(eff_aggressive, nn_aggressive)),
happy = mean(c(eff_happy, nn_happy)),
party = mean(c(eff_party, nn_party)),
relaxed = mean(c(eff_relax, nn_relax)),
sad = mean(c(eff_sad, nn_sad)),
acoustic = mean(c(eff_acoustic, nn_acoustic)),
electric = mean(c(eff_electronic, nn_electronic)),
instrumental = mean(c(eff_instrumental, nn_instrumental)),
timbreBright = eff_timbre_bright
)
###Now that all desired columns are made, we retain only desired
essentia.dataframe = output.model %>%
select(artist, album, track, arousal, valence, aggressive, happy,
party, relaxed, sad, acoustic, electric, instrumental, timbreBright)
view(essentia.dataframe)
##########################################################
###                      Step 3                       ####
# Making new dataframe using essentia models
##########################################################
#Loading our dataframe file
output.model = read.csv("EssentiaOutput/EssentiaModelOutput.csv")
###Writing the matrix utilizing tinyverse
###First focusing on transitioning to using means, then will select only desired columns
output.model = output.model %>%
#I'm a little confused how rowwise works, but when doing some research this seemed
#the best way to accomplish my task, is this saying that from anything past that pipe
#I want to have my functions apply to the entirety of the row?
rowwise() %>%
mutate(
arousal = mean(c(emo_arousal, deam_arousal, muse_arousal)),
valence = mean(c(emo_valence, deam_valence, muse_valence)),
aggressive = mean(c(eff_aggressive, nn_aggressive)),
happy = mean(c(eff_happy, nn_happy)),
party = mean(c(eff_party, nn_party)),
relaxed = mean(c(eff_relax, nn_relax)),
sad = mean(c(eff_sad, nn_sad)),
acoustic = mean(c(eff_acoustic, nn_acoustic)),
electric = mean(c(eff_electronic, nn_electronic)),
instrumental = mean(c(eff_instrumental, nn_instrumental)),
timbreBright = eff_timbre_bright
)
###Now that all desired columns are made, we retain only desired
essentia.dataframe = output.model %>%
select(artist, album, track, arousal, valence, aggressive, happy,
party, relaxed, sad, acoustic, electric, instrumental, timbreBright)
view(essentia.dataframe)
##########################################################
###                      Step 2                       ####
#Completing step 1 for every JSON File
##########################################################
library(stringr)
library(jsonlite)
library(tidyverse)
#Making our empty dataframe
empty.dataframe = data.frame(
artist = character(),
album = character(),
track = character(),
overall_loudness = numeric(),
spectral_energy = numeric(),
dissonance = numeric(),
pitch_salience = numeric(),
bpm = numeric(),
beats_loudness = numeric(),
danceability = numeric(),
tuning_frequency = numeric()
)
song.dataframe = empty.dataframe
#Pulling list of all tracks to be iterated
folder.name = 'EssentiaOutput'
all.tracks = list.files(folder.name)
#Making sure only valid json files are being used
json.count = str_count(all.tracks, ".json")
track.indices = which(json.count == 1)
df.index = 1 #Initializing where to input in dataframe
for (i in track.indices) {
#Running for loop over every track
##########################################################
###                      Step 1                       ####
# Pulling file and extracting necessary info from JSON
##########################################################
current.filename = all.tracks[i]
#current.filename = "The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json"
current.songname = str_sub(current.filename, end = -6)
#Making a vector containing artist, album, and song
song.vector = str_split_1(current.songname, "-")
###Pulling track, album, and artist
current.track = song.vector[3]
current.album = song.vector[2]
current.artist = song.vector[1]
###Pulling data from JSON file
json.pathname = paste(folder.name, current.filename, sep = '/')
json.track = fromJSON(json.pathname)
song.dataframe[df.index, ] <- tibble( #Adding the information directly through a tibble
artist = song.vector[1],
album = song.vector[2],
track = song.vector[3],
overall_loudness = json.track$lowlevel$average_loudness,
spectral_energy = json.track$lowlevel$spectral_energy$mean,
dissonance = json.track$lowlevel$dissonance$mean,
pitch_salience = json.track$lowlevel$pitch_salience$mean,
bpm = json.track$rhythm$bpm,
beats_loudness = json.track$rhythm$beats_loudness$mean,
danceability = json.track$rhythm$danceability,
tuning_frequency = json.track$tonal$tuning_frequency
)
df.index=df.index+1 #Moving to next dataframe index
}
##########################################################
###                      Step 3                       ####
# Making new dataframe using essentia models
##########################################################
#Loading our dataframe file
output.model = read.csv("EssentiaOutput/EssentiaModelOutput.csv")
###Writing the matrix utilizing tinyverse
###First focusing on transitioning to using means, then will select only desired columns
output.model = output.model %>%
#I'm a little confused how rowwise works, but when doing some research this seemed
#the best way to accomplish my task, is this saying that from anything past that pipe
#I want to have my functions apply to the entirety of the row?
rowwise() %>%
mutate(
arousal = mean(c(emo_arousal, deam_arousal, muse_arousal)),
valence = mean(c(emo_valence, deam_valence, muse_valence)),
aggressive = mean(c(eff_aggressive, nn_aggressive)),
happy = mean(c(eff_happy, nn_happy)),
party = mean(c(eff_party, nn_party)),
relaxed = mean(c(eff_relax, nn_relax)),
sad = mean(c(eff_sad, nn_sad)),
acoustic = mean(c(eff_acoustic, nn_acoustic)),
electric = mean(c(eff_electronic, nn_electronic)),
instrumental = mean(c(eff_instrumental, nn_instrumental)),
timbreBright = eff_timbre_bright
)
###Now that all desired columns are made, we retain only desired
essentia.dataframe = output.model %>%
select(artist, album, track, arousal, valence, aggressive, happy,
party, relaxed, sad, acoustic, electric, instrumental, timbreBright)
view(essentia.dataframe)
##########################################################
###                      Step 4                       ####
# Making a final dataframe that includes all information
##########################################################
lyric.output = read.csv("LIWCOutput/LIWCOutput.csv")
#Loading dataframe
###Merging together our .wav data dataframe and our essentia dataframe
final.dataframe = merge(song.dataframe, essentia.dataframe,
by = c("artist", "album", "track")
)
###Adding our lyric dataframe
final.dataframe = merge(final.dataframe, lyric.output,
by = c("artist", "album", "track")
)
# Rename function column
final.dataframe = final.dataframe %>%
rename(func = function.)
#Making every column that is numerical actually have numeric class
final.dataframe[, 4:ncol(final.dataframe)] <- lapply(final.dataframe[, 4:ncol(final.dataframe)], as.numeric)
view(final.dataframe)
##########################################################
###                      Step 2                       ####
#Completing step 1 for every JSON File
##########################################################
library(stringr)
library(jsonlite)
library(tidyverse)
#Making our empty dataframe
empty.dataframe = data.frame(
artist = character(),
album = character(),
track = character(),
overall_loudness = numeric(),
spectral_energy = numeric(),
dissonance = numeric(),
pitch_salience = numeric(),
bpm = numeric(),
beats_loudness = numeric(),
danceability = numeric(),
tuning_frequency = numeric()
)
song.dataframe = empty.dataframe
#Pulling list of all tracks to be iterated
folder.name = 'EssentiaOutput'
all.tracks = list.files(folder.name)
#Making sure only valid json files are being used
json.count = str_count(all.tracks, ".json")
track.indices = which(json.count == 1)
df.index = 1 #Initializing where to input in dataframe
for (i in track.indices) {
#Running for loop over every track
##########################################################
###                      Step 1                       ####
# Pulling file and extracting necessary info from JSON
##########################################################
current.filename = all.tracks[i]
#current.filename = "The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json"
current.songname = str_sub(current.filename, end = -6)
#Making a vector containing artist, album, and song
song.vector = str_split_1(current.songname, "-")
###Pulling data from JSON file
json.pathname = paste(folder.name, current.filename, sep = '/')
json.track = fromJSON(json.pathname)
song.dataframe[df.index, ] <- tibble( #Adding the information directly through a tibble
artist = song.vector[1],
album = song.vector[2],
track = song.vector[3],
overall_loudness = json.track$lowlevel$average_loudness,
spectral_energy = json.track$lowlevel$spectral_energy$mean,
dissonance = json.track$lowlevel$dissonance$mean,
pitch_salience = json.track$lowlevel$pitch_salience$mean,
bpm = json.track$rhythm$bpm,
beats_loudness = json.track$rhythm$beats_loudness$mean,
danceability = json.track$rhythm$danceability,
tuning_frequency = json.track$tonal$tuning_frequency
)
df.index=df.index+1 #Moving to next dataframe index
}
##########################################################
###                      Step 3                       ####
# Making new dataframe using essentia models
##########################################################
#Loading our dataframe file
output.model = read.csv("EssentiaOutput/EssentiaModelOutput.csv")
###Writing the matrix utilizing tinyverse
###First focusing on transitioning to using means, then will select only desired columns
output.model = output.model %>%
#I'm a little confused how rowwise works, but when doing some research this seemed
#the best way to accomplish my task, is this saying that from anything past that pipe
#I want to have my functions apply to the entirety of the row?
rowwise() %>%
mutate(
arousal = mean(c(emo_arousal, deam_arousal, muse_arousal)),
valence = mean(c(emo_valence, deam_valence, muse_valence)),
aggressive = mean(c(eff_aggressive, nn_aggressive)),
happy = mean(c(eff_happy, nn_happy)),
party = mean(c(eff_party, nn_party)),
relaxed = mean(c(eff_relax, nn_relax)),
sad = mean(c(eff_sad, nn_sad)),
acoustic = mean(c(eff_acoustic, nn_acoustic)),
electric = mean(c(eff_electronic, nn_electronic)),
instrumental = mean(c(eff_instrumental, nn_instrumental)),
timbreBright = eff_timbre_bright
)
###Now that all desired columns are made, we retain only desired
essentia.dataframe = output.model %>%
select(artist, album, track, arousal, valence, aggressive, happy,
party, relaxed, sad, acoustic, electric, instrumental, timbreBright)
##########################################################
###                      Step 4                       ####
# Making a final dataframe that includes all information
##########################################################
lyric.output = read.csv("LIWCOutput/LIWCOutput.csv")
#Loading dataframe
###Merging together our .wav data dataframe and our essentia dataframe
final.dataframe = merge(song.dataframe, essentia.dataframe,
by = c("artist", "album", "track")
)
###Adding our lyric dataframe
final.dataframe = merge(final.dataframe, lyric.output,
by = c("artist", "album", "track")
)
# Rename function column
final.dataframe = final.dataframe %>%
rename(func = function.)
#Making every column that is numerical actually have numeric class
final.dataframe[, 4:ncol(final.dataframe)] <- lapply(final.dataframe[, 4:ncol(final.dataframe)], as.numeric)
##########################################################
###                      Step 5                       ####
# Separating out Allentown
##########################################################
#Making a file that contains everything except Allentown
write.csv(final.dataframe[final.dataframe$track!="Allentown", ], "trainingdata.csv")
#Making a file that ONLY contains Allentown
write.csv(final.dataframe[final.dataframe$track=="Allentown", ], "testingdata.csv")
View(final.dataframe)
